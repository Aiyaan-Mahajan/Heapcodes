#include<iostream>
using namespace std;
class MaxHeap{
int * arr;
int size;  //total elements in heap
int total_size;  //total size of array

public:
MaxHeap(int n){
arr = new int[n];
size =0;
total_size = n; 
}

//insert into heap

void insert(int value){
//if heap size is available or not

if(size == total_size){
cout<<"Heap Overflow\n";
return;
}

 arr[size] = value;
 int index = size;
 size++;   
//Compare it with its parents
 while(index>0 && arr[(index-1)/2]<arr[index]){
    swap(arr[(index-1)/2],arr[index]);
    index=(index-1)/2;
 }
cout<<arr[index]<<" is inserted into the heap\n";
}

void print(){
    for(int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
}
void Delete(){
if(size==0){
cout<<"Heap Underflow\n";
return ;
}
cout<<arr[0]<<" deleted from the heap\n";
arr[0]=arr[size-1];
size--;
if(size == 0){
    return ;
}
heapify(0);
}
void heapify(int index){
int largest = index;
int left = 2*index+1;
int right = 2*index+2;
if(left<size && arr[left]<arr[largest]){
    largest = left;
}
if(right<size && arr[right]>arr[largest]){
    largest = right;
}
if(largest!=index){
    swap(arr[index],arr[largest]);
    heapify(largest);
}
}
};
int main(){

MaxHeap H1(5);//5 is size of heap
H1.insert(7);
H1.insert(12);
H1.insert(35);
H1.insert(45);
H1.insert(62);
H1.insert(7);
H1.print();
cout<<endl;
H1.Delete();

H1.print();
H1.Delete();
H1.Delete();
H1.Delete();
H1.Delete();
H1.Delete();
}
